#include "CRC16CCITT.h"
#include "../debug.h"

CRCType CRC16CCITT::getPolynomial() const
{
	return (1 << 0 | 1 << 5 | 1 << 12);
}

CRCType CRC16CCITT::getPolynomialReverse() const
{
	return (1 << (15-0) | 1 << (15-5) | 1 << (15-12));
}

size_t CRC16CCITT::getNumBytes() const
{
	return 2;
}

size_t CRC16CCITT::getNumBits() const
{
	return 16;
}

CRCType CRC16CCITT::makeNextChecksum(
	const CRCType &prevChecksum,
	unsigned char c) const
{
	uint8_t tmp = ((prevChecksum >> 8) ^ c) & 0xff;
	uint16_t ret = (prevChecksum << 8) ^ this->lookupTable[tmp];
	ret &= 0xffff;
	return ret;
}

CRCType CRC16CCITT::makePrevChecksum(
	const CRCType &nextChecksum,
	unsigned char c) const
{
	uint16_t ret =
		(c << 8)
		^ this->invLookupTable[(uint8_t) (nextChecksum & 0xff)]
		^ (nextChecksum << 8)
		^ (nextChecksum >> 8);

	ret &= 0xffff;
	return ret;
}

CRC16CCITT::CRC16CCITT() : CRC()
{
	this->setInitialXOR(0);
	this->setFinalXOR(0);
	/*uint16_t tmp[] =
	{
		0x0000, 0x2214, 0x4428, 0x663c, 0x8850, 0xaa44, 0xcc78, 0xee6c,
		0x0081, 0x2295, 0x44a9, 0x66bd, 0x88d1, 0xaac5, 0xccf9, 0xeeed,
		0x0102, 0x2316, 0x452a, 0x673e, 0x8952, 0xab46, 0xcd7a, 0xef6e,
		0x0183, 0x2397, 0x45ab, 0x67bf, 0x89d3, 0xabc7, 0xcdfb, 0xefef,
		0x0204, 0x2010, 0x462c, 0x6438, 0x8a54, 0xa840, 0xce7c, 0xec68,
		0x0285, 0x2091, 0x46ad, 0x64b9, 0x8ad5, 0xa8c1, 0xcefd, 0xece9,
		0x0306, 0x2112, 0x472e, 0x653a, 0x8b56, 0xa942, 0xcf7e, 0xed6a,
		0x0387, 0x2193, 0x47af, 0x65bb, 0x8bd7, 0xa9c3, 0xcfff, 0xedeb,
		0x0408, 0x261c, 0x4020, 0x6234, 0x8c58, 0xae4c, 0xc870, 0xea64,
		0x0489, 0x269d, 0x40a1, 0x62b5, 0x8cd9, 0xaecd, 0xc8f1, 0xeae5,
		0x050a, 0x271e, 0x4122, 0x6336, 0x8d5a, 0xaf4e, 0xc972, 0xeb66,
		0x058b, 0x279f, 0x41a3, 0x63b7, 0x8ddb, 0xafcf, 0xc9f3, 0xebe7,
		0x060c, 0x2418, 0x4224, 0x6030, 0x8e5c, 0xac48, 0xca74, 0xe860,
		0x068d, 0x2499, 0x42a5, 0x60b1, 0x8edd, 0xacc9, 0xcaf5, 0xe8e1,
		0x070e, 0x251a, 0x4326, 0x6132, 0x8f5e, 0xad4a, 0xcb76, 0xe962,
		0x078f, 0x259b, 0x43a7, 0x61b3, 0x8fdf, 0xadcb, 0xcbf7, 0xe9e3,
		0x0810, 0x2a04, 0x4c38, 0x6e2c, 0x8040, 0xa254, 0xc468, 0xe67c,
		0x0891, 0x2a85, 0x4cb9, 0x6ead, 0x80c1, 0xa2d5, 0xc4e9, 0xe6fd,
		0x0912, 0x2b06, 0x4d3a, 0x6f2e, 0x8142, 0xa356, 0xc56a, 0xe77e,
		0x0993, 0x2b87, 0x4dbb, 0x6faf, 0x81c3, 0xa3d7, 0xc5eb, 0xe7ff,
		0x0a14, 0x2800, 0x4e3c, 0x6c28, 0x8244, 0xa050, 0xc66c, 0xe478,
		0x0a95, 0x2881, 0x4ebd, 0x6ca9, 0x82c5, 0xa0d1, 0xc6ed, 0xe4f9,
		0x0b16, 0x2902, 0x4f3e, 0x6d2a, 0x8346, 0xa152, 0xc76e, 0xe57a,
		0x0b97, 0x2983, 0x4fbf, 0x6dab, 0x83c7, 0xa1d3, 0xc7ef, 0xe5fb,
		0x0c18, 0x2e0c, 0x4830, 0x6a24, 0x8448, 0xa65c, 0xc060, 0xe274,
		0x0c99, 0x2e8d, 0x48b1, 0x6aa5, 0x84c9, 0xa6dd, 0xc0e1, 0xe2f5,
		0x0d1a, 0x2f0e, 0x4932, 0x6b26, 0x854a, 0xa75e, 0xc162, 0xe376,
		0x0d9b, 0x2f8f, 0x49b3, 0x6ba7, 0x85cb, 0xa7df, 0xc1e3, 0xe3f7,
		0x0e1c, 0x2c08, 0x4a34, 0x6820, 0x864c, 0xa458, 0xc264, 0xe070,
		0x0e9d, 0x2c89, 0x4ab5, 0x68a1, 0x86cd, 0xa4d9, 0xc2e5, 0xe0f1,
		0x0f1e, 0x2d0a, 0x4b36, 0x6922, 0x874e, 0xa55a, 0xc366, 0xe172,
		0x0f9f, 0x2d8b, 0x4bb7, 0x69a3, 0x87cf, 0xa5db, 0xc3e7, 0xe1f3,
	};*/
	for (uint16_t n = 0; n <= 0xff; n ++)
	{
		uint16_t crc1 = 0;
		uint32_t crc2 = 0;
		for (uint8_t k = 0; k < 8; k ++)
		{
			if ((crc1 ^ (n << (8 + k))) & 0x8000)
			{
				crc1 = (crc1 << 1) ^ this->getPolynomial();
			}
			else
			{
				crc1 <<= 1;
			}
			if ((crc2 ^ (n >> k)) & 1)
			{
				crc2 = ((crc2 ^ this->getPolynomial()) >> 1) | 0x100000;
			}
			else
			{
				crc2 >>= 1;
			}
		}
		crc2 &= 0xffff;
		this->lookupTable[n] = crc1;
		this->invLookupTable [n] = static_cast<uint16_t>(crc2);
	}
}

CRCType CRC16CCITT::computePatch(
	const CRCType &desiredChecksum,
	const File::OffsetType &desiredPosition,
	File &inputFile,
	const bool &overwrite) const
{
	uint16_t checksum1 = this->computePartialChecksum(
		inputFile,
		0,
		desiredPosition,
		this->getInitialXOR());
	uint16_t checksum2 = this->computeReversePartialChecksum(
		inputFile,
		inputFile.getFileSize(),
		desiredPosition + ((File::OffsetType) (overwrite ? 2 : 0)),
		(uint16_t) (desiredChecksum ^ this->getFinalXOR()));

	uint16_t patch = checksum2;
	size_t i, j;
	for (i = 0, j = 1; i < 2; i ++, j --)
	{
		//differrent order to CRC32
		patch = this->makePrevChecksum(patch, (checksum1 >> (i << 3)) & 0xff);
	}
	return (patch << 8 | patch >> 8) & 0xffff;
}
